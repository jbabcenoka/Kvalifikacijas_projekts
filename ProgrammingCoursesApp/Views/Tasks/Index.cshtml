@model IEnumerable<ProgrammingCoursesApp.Models.TopicBlock>

@{
    ViewData["Title"] = "Topic";
    bool firstTabHeader = true;
    bool firstTabBody = true;

    var topicName = ViewBag.TopicName;
    var topicId = Model.FirstOrDefault()?.Topic.Id;
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

<script type="text/javascript">
        function getPossibleAnswers(taskId) {
            $.ajax({
                type: "GET",
                url: "@Url.Action(nameof(TasksController.GetPossibleAnswers), "Tasks")",
                contentType: "application/json; charset=utf-8",
                data: { "id": taskId },
                dataType: "json",
                success: function (response) {
                    $.each(response, function (index, item) {
                        $('#possible-answers-' + taskId)
                            .append('<input id=answer-' + item.id + ' type="radio" name = "possibleAnswer" value=' + item.id + '/><span> ' + item.text + '</span > <br />')
                    });
                },
                failure: function (jqXHR) {
                    alert("HTTP Status: " + jqXHR.status + "; Error Text: " + jqXHR.responseText);
                }
            })
        }
</script>

<h1>@(topicName != null ? "Exercises for topic " + topicName : "Exercises for topic")</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.DisplayOrder)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Points)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.DisplayOrder)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Points)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<nav>
    <div class="nav nav-tabs" id="nav-tab" role="tablist">
        @foreach (var topicBlock in Model)
        {
            <button class="nav-link @(firstTabHeader ? "active" : null)" data-bs-toggle="tab" type="button" role="tab"
                    data-bs-target="#topic@(topicBlock.Id)">
                @if (topicBlock.Task.GetType() == typeof(VideoTask))
                {
                    <span>Video</span>
                }
                else if (topicBlock.Task.GetType() == typeof(ReadTask))
                {
                    <span>Reading</span>
                }
                else
                {
                    <span>Exercise</span>
                }
            </button>
            firstTabHeader = false;
        }
    </div>
</nav>

<div class="tab-content">
    @foreach (var topicBlock in Model)
    {
        <div id="topic@(topicBlock.Id)" class="tab-pane @(firstTabBody ? "active" : null)" role="tabpanel">
            <box>Points: @topicBlock.Points</box>
            @if (topicBlock.Task.GetType() == typeof(ReadTask))
            {
                var task = (ReadTask)topicBlock.Task;
                <div class="read-content content">
                    <h4>@task.Name</h4>
                    @task.Text
                </div>
            }
            else if (topicBlock.Task.GetType() == typeof(VideoTask))
            {
                var task = (VideoTask)topicBlock.Task;
                <div class="content">
                    <h4>@task.Name</h4>
                </div>
                <div class="video-content content">
                    <iframe src="@task.Link"
                            title="YouTube video player" frameborder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                            allowfullscreen></iframe>
                </div>
            }
            else   //uzdevums
            {
                var task = (Exercise)topicBlock.Task;

                <div class="exercise-content content">
                    <h4>@task.Name</h4>

                    <h4>@task.QuestionText</h4>

                    <form id="possible-answers-@task.Id">
                    </form>

                    <script type="text/javascript">
                        getPossibleAnswers(@task.Id);
                    </script>

                </div>
            }
            
        </div>
        firstTabBody = false;
    }
</div>

<style>
    box {
        border: 2px solid rebeccapurple;
        box-shadow: 12px 12px 2px 1px rgba(0, 0, 255, .2);
        padding: 10px;
        position: relative;
        top: 25px;
        font-size: 1.1em;
        background-color: beige;
        font-weight: 700;
        left: 80%;
    }

    span {
        cursor: default;
        margin-left: 10px;
    }

    h4 {
        margin-bottom: 20px;
    }

    .tab-content {
        margin-bottom: 100px;
    }

    .content {
        clear: both;
        font-size: 18px;
        width: 60%;
        margin-left: 10%;
        margin-top: 10px;
    }

    .video-content {
        overflow: hidden;
        position: relative;
        padding-top: 33.76%;
    }

    iframe {
        width: 100%;
        height: 100%;
        position: absolute;
        left: 0;
        bottom: 0;
        right: 0;
    }
</style>

